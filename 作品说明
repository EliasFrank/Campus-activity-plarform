需求分析：
1、	带有登录注册功能 ： 用数据库存储用户的信息，包括账号密码。

2、	管理员  ： 管理员也拥有自己的账号密码，对数据库中的数据进行操作。


审核活动（决定学生会发布的活动是否通过） ：
	将学生会申请发布的活动存放在数据库的表中，并给予pass属性，如果pass为1则表示通过了管理员审核。如果为0则表示管理员还未审核或审核未通过

审核学分（决定学生申请的学分是否通过）  ：
将用户申请的学分信息存放在数据库的表中，并给予pass属性，如果pass为1则表示通过了管理员审核。如果为0则表示管理员还未审核或审核未通过

指定学生会成员  ：
将每个账号都设置一个isMemberOfUnion属性，0表示不是学生会成员，1表示是学生会成员。管理员可以再指定的界面给予或剥夺用户的学生会成员身份

3、	普通用户  ：
·	用户属性包括：头像，姓名，年龄，性别，账号，密码，学分，学生会成员，签到员
·	
 申请参加活动 ：
	用户可以查看所有活动，可以按时间，学分等信息进行查找，也可以按活动名称搜索，然后在活动详情的界面申请参加活动

 修改自己的信息 
	用户可以在主界面点开我的信息界面，在我的信息界面里可以点击修改信息按钮，即可对信息进行修改，账号是不能修改的

 申请学分  
	用户可在学分申请界面申请学分，需要输入用户的姓名，学分以及理由

 签到签退
	用户可以再活动详情界面申请签到签退

4、	学生会   
申请发布活动  
	在发布活动界面填写活动信息，然后向服务端发送请求，将该活动信息存进数据库，等待管理员的审核

 指定签到员   
	每个用户都有一个签到员属性，数据库中也有一张表用于记录各个活动的签到员

5、	签到员  签到员只能给自己管理的活动的参与用户进行签到签退

 给其他用户进行签到签退
签退时自动发放给对应用户该活动的学分。

6、	超级管理员
用于审核数据库中审核的管理员账号

7、	网络通信
客户端和服务端之间用tcp进行数据传输

概要设计：
登录注册：
	当用户需要进行登录时，获取用户的账号密码，并向服务器发送查询语句，（select * from … where account= …鞍点password = …），服务器再向数据库发送sql语句，如果有返回结果，则证明账号密码正确，数据库中有该用户。
	当用户需要进行注册时，获取用户所填写的信息并整合好SQL语句发送给服务端。服务端将该数据插入数据库中。

超级管理员：
	超级管理员拥有固定的账号密码，有且只有一个。用来指定管理员。管理员和用户不可注册与超级管理员相同的账号。超级管理员只有一个可用界面

管理员   审核活动  审核学分   指定学生会成员：
在管理员窗口，唤起其他窗口。管理员可在其他窗口，通过对jlist列表进行操作，进而改变数据库中一些表的一些属性。

普通用户   修改自己的信息   申请学分
学生会   申请发布活动：
可在主界面唤起别的界面，然后按照提示填写完所有信息后，向服务端提交数据

普通用户   申请参加活动  签到签退：
	可在活动详情界面点击按钮，软件自动获取用户信息，然后向服务端发送请求

学生会  指定签到员：
	在添加签到员界面输入活动编号，并在下方的jlist界面选择签到员。

签到员  给其他用户进行签到签退：
	每个签到员只能给某些活动的用户进行签到。不能给不归自己签到的活动进行签到

服务端：
	用一个循环不断接收来自客服端的请求。为了避免多个客服端访问服务器，导致并发，本软件将每个连接进来的用户单独开辟一个线程进行数据交互
详细设计：（见源码）
测试分析：
1.	在注册界面，上传头像的操作还没处理好，该功能暂时不开放。
后续学习了改变图像尺寸技术之后，可以检测该文件是否存在，如果存在则将其改变尺寸后上传到服务端，保存在服务端。
2.	多个管理员对同一个学分申请进行同意后，会发生并发修改异常。该用户的学分会额外增加。
后续学习了对MySQL数据库的表进行加锁后，则可防止该操作的异常发生。（多个签到员对同一个用户同时签退时也会发生此等情况）
3.	在登录时，用户可以通过SQL攻击（account = ’a’ or ‘a’ = ‘a’）登录进主界面，这里我们使用了正则表达式进行匹配，账号必须是以0开头的6-12位的数字，
总结：
这次的任务包含了很多，有对旧知识的回顾与新理解，也有对新知识的探索和运用。整个人都在这次任务中成长了许多。
